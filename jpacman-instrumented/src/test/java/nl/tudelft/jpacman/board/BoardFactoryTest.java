package nl.tudelft.jpacman.board;

import static sqat.series2.Api.hit;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import nl.tudelft.jpacman.sprite.PacManSprites;

import org.junit.Before;
import org.junit.Test;

public class BoardFactoryTest  {

	/**
	 * The factory under test.
	 */
	private BoardFactory factory;
	
	/**
	 * Resets the factory under test.
	 */
	@Before
	public void setUp()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(465,125,<25,1>,<29,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(465,125,<25,1>,<29,2>)", "19"); PacManSprites sprites = mock(PacManSprites.class); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(465,125,<25,1>,<29,2>)", "20"); factory = new BoardFactory(sprites); }
	
	/**
	 * Verifies that a single cell is connected to itself on all sides.
	 */
	@Test
	public void worldIsRound()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "21"); Square s = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "22"); Square[][] grid = new Square[][]{{s}}; hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "23"); factory.createBoard(grid); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "24"); assertEquals(s, s.getSquareAt(Direction.NORTH)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "25"); assertEquals(s, s.getSquareAt(Direction.SOUTH)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "26"); assertEquals(s, s.getSquareAt(Direction.WEST)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(673,342,<34,1>,<43,2>)", "27"); assertEquals(s, s.getSquareAt(Direction.EAST)); }
	
	/**
	 * Verifies a chain of cells is connected to the east.
	 */
	@Test
	public void connectedEast()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "28"); Square s1 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "29"); Square s2 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "30"); Square[][] grid = new Square[][]{{s1}, {s2}}; hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "31"); factory.createBoard(grid); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "32"); assertEquals(s2, s1.getSquareAt(Direction.EAST)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1085,286,<48,1>,<56,2>)", "33"); assertEquals(s1, s2.getSquareAt(Direction.EAST)); }
	
	/**
	 * Verifies a chain of cells is connected to the west.
	 */
	@Test
	public void connectedWest()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "34"); Square s1 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "35"); Square s2 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "36"); Square[][] grid = new Square[][]{{s1}, {s2}}; hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "37"); factory.createBoard(grid); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "38"); assertEquals(s2, s1.getSquareAt(Direction.WEST)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1441,286,<61,1>,<69,2>)", "39"); assertEquals(s1, s2.getSquareAt(Direction.WEST)); }
	
	/**
	 * Verifies a chain of cells is connected to the north.
	 */
	@Test
	public void connectedNorth()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "40"); Square s1 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "41"); Square s2 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "42"); Square[][] grid = new Square[][]{{s1, s2}}; hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "43"); factory.createBoard(grid); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "44"); assertEquals(s2, s1.getSquareAt(Direction.NORTH)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(1798,287,<74,1>,<82,2>)", "45"); assertEquals(s1, s2.getSquareAt(Direction.NORTH)); }
	
	/**
	 * Verifies a chain of cells is connected to the south.
	 */
	@Test
	public void connectedSouth()  { hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)"); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "46"); Square s1 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "47"); Square s2 = new BasicSquare(); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "48"); Square[][] grid = new Square[][]{{s1, s2}}; hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "49"); factory.createBoard(grid); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "50"); assertEquals(s2, s1.getSquareAt(Direction.SOUTH)); hit("|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(315,2130,<15,0>,<96,1>)", "|project://jpacman/src/test/java/nl/tudelft/jpacman/board/BoardFactoryTest.java|(2156,287,<87,1>,<95,2>)", "51"); assertEquals(s1, s2.getSquareAt(Direction.SOUTH)); }
}
